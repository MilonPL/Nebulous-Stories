using Content.Client.Guidebook;
using Content.Client.Guidebook.RichText;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Info;

[GenerateTypedNameReferences]
public sealed partial class RulesControl : BoxContainer, ILinkClickHandler
{
    [Dependency] private readonly RulesManager _rules = default!;
    [Dependency] private readonly DocumentParsingManager _parsingMan = default!;

    private string? _currentEntry;
    private readonly Stack<string> _priorEntries = new();

    public RulesControl()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        SetGuide(_rules.GetCoreRuleEntry());

        HomeButton.OnPressed += _ =>
        {
            SetGuide(_rules.GetCoreRuleEntry());
        };

        BackButton.OnPressed += _ =>
        {
            SetGuide(_priorEntries.Pop(), false);
        };
    }

    public void HandleClick(string link)
    {
        SetGuide(link);
    }

    private void SetGuide(ProtoId<GuideEntryPrototype> entry, bool addToPrior = true)
    {
        Scroll.SetScrollValue(default);
        RulesContainer.Children.Clear();
        if (!_parsingMan.TryAddMarkup(RulesContainer, entry))
            return;

        if (addToPrior && _currentEntry != null)
            _priorEntries.Push(_currentEntry);
        _currentEntry = entry;

        HomeButton.Visible = entry != _rules.GetCoreRuleEntry().Id;
        BackButton.Visible = _priorEntries.Count != 0 && _priorEntries.Peek() != entry;
    }
}
